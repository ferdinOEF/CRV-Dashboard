let currentTheme = "All";

// Fetch data
fetch('riskData.json')
  .then(response => response.json())
  .then(data => {
    const markers = [];

    function renderMarkers(theme) {
      // Clear old markers
      markers.forEach(m => map.removeLayer(m));
      markers.length = 0;

      data.talukas.forEach(taluka => {
        const marker = L.marker([taluka.lat, taluka.lng]).addTo(map);

        let popupContent = `<h3>${taluka.name}</h3>`;

        if (theme === "All") {
          for (const [t, risks] of Object.entries(taluka.themes)) {
            popupContent += `<strong>${t}</strong><ul>`;
            risks.forEach(risk => popupContent += `<li>${risk}</li>`);
            popupContent += `</ul>`;
          }
        } else if (taluka.themes[theme]) {
          popupContent += `<strong>${theme}</strong><ul>`;
          taluka.themes[theme].forEach(risk => popupContent += `<li>${risk}</li>`);
          popupContent += `</ul>`;
        } else {
          popupContent += `<em>No data for ${theme}</em>`;
        }

        marker.bindPopup(popupContent);
        markers.push(marker);
      });
    }

    // Initial load
    renderMarkers("All");

    // Create theme filter dropdown
    const select = L.control({position: 'topright'});
    select.onAdd = function() {
      const div = L.DomUtil.create('div', 'theme-filter');
      div.innerHTML = `
        <select id="themeSelect">
          <option value="All">All Themes</option>
          ${data.themes.map(t => `<option value="${t}">${t}</option>`).join('')}
        </select>
      `;
      return div;
    };
    select.addTo(map);

    // Handle dropdown change
    document.addEventListener('change', e => {
      if (e.target && e.target.id === "themeSelect") {
        currentTheme = e.target.value;
        renderMarkers(currentTheme);
      }
    });
  });
